/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package phantomlancer.test.serialize;

import lombok.Builder;

@SuppressWarnings("all")
/** Auto Schema Metric */
@Builder
@org.apache.avro.specific.AvroGenerated
public class Metric2 extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
    public static final org.apache.avro.Schema SCHEMA$ =
                                                               new org.apache.avro.Schema.Parser()
                                                                       .parse("{\"type\":\"record\",\"name\":\"Metric2\",\"namespace\":\"phantomlancer.test.serialize\",\"doc\":\"Auto Schema Metric\",\"fields\":[{\"name\":\"dataVersion\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"salt\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"applicationId\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"timeScope\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"metricTypeId\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"metricId\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"time\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"agentRunId\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"uuid\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"num1\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"num2\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"num3\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"num4\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"num5\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"num6\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"timestamp\",\"type\":[\"null\",\"long\"],\"default\":null}]}");

    public static org.apache.avro.Schema getClassSchema() {
        return SCHEMA$;
    }

    @Deprecated
    public java.lang.Integer      dataVersion;
    @Deprecated
    public java.lang.Integer      salt;
    @Deprecated
    public java.lang.Long         applicationId;
    @Deprecated
    public java.lang.Integer      timeScope;
    @Deprecated
    public java.lang.Long         metricTypeId;
    @Deprecated
    public java.lang.Long         metricId;
    @Deprecated
    public java.lang.Integer      time;
    @Deprecated
    public java.lang.Long         agentRunId;
    @Deprecated
    public java.lang.CharSequence uuid;
    @Deprecated
    public java.lang.Double       num1;
    @Deprecated
    public java.lang.Double       num2;
    @Deprecated
    public java.lang.Double       num3;
    @Deprecated
    public java.lang.Double       num4;
    @Deprecated
    public java.lang.Double       num5;
    @Deprecated
    public java.lang.Double       num6;
    @Deprecated
    public java.lang.Long         timestamp;

    /**
     * Default constructor. Note that this does not initialize fields to their default values from
     * the schema. If that is desired then one should use <code>newBuilder()</code>.
     */
    public Metric2() {}

    /**
     * All-args constructor.
     */
    public Metric2(java.lang.Integer dataVersion, java.lang.Integer salt, java.lang.Long applicationId, java.lang.Integer timeScope, java.lang.Long metricTypeId,
            java.lang.Long metricId, java.lang.Integer time, java.lang.Long agentRunId, java.lang.CharSequence uuid, java.lang.Double num1, java.lang.Double num2,
            java.lang.Double num3, java.lang.Double num4, java.lang.Double num5, java.lang.Double num6, java.lang.Long timestamp) {
        this.dataVersion = dataVersion;
        this.salt = salt;
        this.applicationId = applicationId;
        this.timeScope = timeScope;
        this.metricTypeId = metricTypeId;
        this.metricId = metricId;
        this.time = time;
        this.agentRunId = agentRunId;
        this.uuid = uuid;
        this.num1 = num1;
        this.num2 = num2;
        this.num3 = num3;
        this.num4 = num4;
        this.num5 = num5;
        this.num6 = num6;
        this.timestamp = timestamp;
    }

    public org.apache.avro.Schema getSchema() {
        return SCHEMA$;
    }

    // Used by DatumWriter. Applications should not call.
    public java.lang.Object get(int field$) {
        switch (field$) {
            case 0:
                return dataVersion;
            case 1:
                return salt;
            case 2:
                return applicationId;
            case 3:
                return timeScope;
            case 4:
                return metricTypeId;
            case 5:
                return metricId;
            case 6:
                return time;
            case 7:
                return agentRunId;
            case 8:
                return uuid;
            case 9:
                return num1;
            case 10:
                return num2;
            case 11:
                return num3;
            case 12:
                return num4;
            case 13:
                return num5;
            case 14:
                return num6;
            case 15:
                return timestamp;
            default:
                throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }

    // Used by DatumReader. Applications should not call.
    @SuppressWarnings(value = "unchecked")
    public void put(int field$, java.lang.Object value$) {
        switch (field$) {
            case 0:
                dataVersion = (java.lang.Integer) value$;
                break;
            case 1:
                salt = (java.lang.Integer) value$;
                break;
            case 2:
                applicationId = (java.lang.Long) value$;
                break;
            case 3:
                timeScope = (java.lang.Integer) value$;
                break;
            case 4:
                metricTypeId = (java.lang.Long) value$;
                break;
            case 5:
                metricId = (java.lang.Long) value$;
                break;
            case 6:
                time = (java.lang.Integer) value$;
                break;
            case 7:
                agentRunId = (java.lang.Long) value$;
                break;
            case 8:
                uuid = (java.lang.CharSequence) value$;
                break;
            case 9:
                num1 = (java.lang.Double) value$;
                break;
            case 10:
                num2 = (java.lang.Double) value$;
                break;
            case 11:
                num3 = (java.lang.Double) value$;
                break;
            case 12:
                num4 = (java.lang.Double) value$;
                break;
            case 13:
                num5 = (java.lang.Double) value$;
                break;
            case 14:
                num6 = (java.lang.Double) value$;
                break;
            case 15:
                timestamp = (java.lang.Long) value$;
                break;
            default:
                throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }

    /**
     * Gets the value of the 'dataVersion' field.
     */
    public java.lang.Integer getDataVersion() {
        return dataVersion;
    }

    /**
     * Sets the value of the 'dataVersion' field.
     * 
     * @param value the value to set.
     */
    public void setDataVersion(java.lang.Integer value) {
        this.dataVersion = value;
    }

    /**
     * Gets the value of the 'salt' field.
     */
    public java.lang.Integer getSalt() {
        return salt;
    }

    /**
     * Sets the value of the 'salt' field.
     * 
     * @param value the value to set.
     */
    public void setSalt(java.lang.Integer value) {
        this.salt = value;
    }

    /**
     * Gets the value of the 'applicationId' field.
     */
    public java.lang.Long getApplicationId() {
        return applicationId;
    }

    /**
     * Sets the value of the 'applicationId' field.
     * 
     * @param value the value to set.
     */
    public void setApplicationId(java.lang.Long value) {
        this.applicationId = value;
    }

    /**
     * Gets the value of the 'timeScope' field.
     */
    public java.lang.Integer getTimeScope() {
        return timeScope;
    }

    /**
     * Sets the value of the 'timeScope' field.
     * 
     * @param value the value to set.
     */
    public void setTimeScope(java.lang.Integer value) {
        this.timeScope = value;
    }

    /**
     * Gets the value of the 'metricTypeId' field.
     */
    public java.lang.Long getMetricTypeId() {
        return metricTypeId;
    }

    /**
     * Sets the value of the 'metricTypeId' field.
     * 
     * @param value the value to set.
     */
    public void setMetricTypeId(java.lang.Long value) {
        this.metricTypeId = value;
    }

    /**
     * Gets the value of the 'metricId' field.
     */
    public java.lang.Long getMetricId() {
        return metricId;
    }

    /**
     * Sets the value of the 'metricId' field.
     * 
     * @param value the value to set.
     */
    public void setMetricId(java.lang.Long value) {
        this.metricId = value;
    }

    /**
     * Gets the value of the 'time' field.
     */
    public java.lang.Integer getTime() {
        return time;
    }

    /**
     * Sets the value of the 'time' field.
     * 
     * @param value the value to set.
     */
    public void setTime(java.lang.Integer value) {
        this.time = value;
    }

    /**
     * Gets the value of the 'agentRunId' field.
     */
    public java.lang.Long getAgentRunId() {
        return agentRunId;
    }

    /**
     * Sets the value of the 'agentRunId' field.
     * 
     * @param value the value to set.
     */
    public void setAgentRunId(java.lang.Long value) {
        this.agentRunId = value;
    }

    /**
     * Gets the value of the 'uuid' field.
     */
    public java.lang.CharSequence getUuid() {
        return uuid;
    }

    /**
     * Sets the value of the 'uuid' field.
     * 
     * @param value the value to set.
     */
    public void setUuid(java.lang.CharSequence value) {
        this.uuid = value;
    }

    /**
     * Gets the value of the 'num1' field.
     */
    public java.lang.Double getNum1() {
        return num1;
    }

    /**
     * Sets the value of the 'num1' field.
     * 
     * @param value the value to set.
     */
    public void setNum1(java.lang.Double value) {
        this.num1 = value;
    }

    /**
     * Gets the value of the 'num2' field.
     */
    public java.lang.Double getNum2() {
        return num2;
    }

    /**
     * Sets the value of the 'num2' field.
     * 
     * @param value the value to set.
     */
    public void setNum2(java.lang.Double value) {
        this.num2 = value;
    }

    /**
     * Gets the value of the 'num3' field.
     */
    public java.lang.Double getNum3() {
        return num3;
    }

    /**
     * Sets the value of the 'num3' field.
     * 
     * @param value the value to set.
     */
    public void setNum3(java.lang.Double value) {
        this.num3 = value;
    }

    /**
     * Gets the value of the 'num4' field.
     */
    public java.lang.Double getNum4() {
        return num4;
    }

    /**
     * Sets the value of the 'num4' field.
     * 
     * @param value the value to set.
     */
    public void setNum4(java.lang.Double value) {
        this.num4 = value;
    }

    /**
     * Gets the value of the 'num5' field.
     */
    public java.lang.Double getNum5() {
        return num5;
    }

    /**
     * Sets the value of the 'num5' field.
     * 
     * @param value the value to set.
     */
    public void setNum5(java.lang.Double value) {
        this.num5 = value;
    }

    /**
     * Gets the value of the 'num6' field.
     */
    public java.lang.Double getNum6() {
        return num6;
    }

    /**
     * Sets the value of the 'num6' field.
     * 
     * @param value the value to set.
     */
    public void setNum6(java.lang.Double value) {
        this.num6 = value;
    }

    /**
     * Gets the value of the 'timestamp' field.
     */
    public java.lang.Long getTimestamp() {
        return timestamp;
    }

    /**
     * Sets the value of the 'timestamp' field.
     * 
     * @param value the value to set.
     */
    public void setTimestamp(java.lang.Long value) {
        this.timestamp = value;
    }

    /** Creates a new Metric2 RecordBuilder */
    public static phantomlancer.test.serialize.Metric2.Builder newBuilder() {
        return new phantomlancer.test.serialize.Metric2.Builder();
    }

    /** Creates a new Metric2 RecordBuilder by copying an existing Builder */
    public static phantomlancer.test.serialize.Metric2.Builder newBuilder(phantomlancer.test.serialize.Metric2.Builder other) {
        return new phantomlancer.test.serialize.Metric2.Builder(other);
    }

    /** Creates a new Metric2 RecordBuilder by copying an existing Metric2 instance */
    public static phantomlancer.test.serialize.Metric2.Builder newBuilder(phantomlancer.test.serialize.Metric2 other) {
        return new phantomlancer.test.serialize.Metric2.Builder(other);
    }

    /**
     * RecordBuilder for Metric2 instances.
     */
    public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Metric2> implements org.apache.avro.data.RecordBuilder<Metric2> {

        private java.lang.Integer      dataVersion;
        private java.lang.Integer      salt;
        private java.lang.Long         applicationId;
        private java.lang.Integer      timeScope;
        private java.lang.Long         metricTypeId;
        private java.lang.Long         metricId;
        private java.lang.Integer      time;
        private java.lang.Long         agentRunId;
        private java.lang.CharSequence uuid;
        private java.lang.Double       num1;
        private java.lang.Double       num2;
        private java.lang.Double       num3;
        private java.lang.Double       num4;
        private java.lang.Double       num5;
        private java.lang.Double       num6;
        private java.lang.Long         timestamp;

        /** Creates a new Builder */
        private Builder() {
            super(phantomlancer.test.serialize.Metric2.SCHEMA$);
        }

        /** Creates a Builder by copying an existing Builder */
        private Builder(phantomlancer.test.serialize.Metric2.Builder other) {
            super(other);
            if (isValidValue(fields()[0], other.dataVersion)) {
                this.dataVersion = data().deepCopy(fields()[0].schema(), other.dataVersion);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.salt)) {
                this.salt = data().deepCopy(fields()[1].schema(), other.salt);
                fieldSetFlags()[1] = true;
            }
            if (isValidValue(fields()[2], other.applicationId)) {
                this.applicationId = data().deepCopy(fields()[2].schema(), other.applicationId);
                fieldSetFlags()[2] = true;
            }
            if (isValidValue(fields()[3], other.timeScope)) {
                this.timeScope = data().deepCopy(fields()[3].schema(), other.timeScope);
                fieldSetFlags()[3] = true;
            }
            if (isValidValue(fields()[4], other.metricTypeId)) {
                this.metricTypeId = data().deepCopy(fields()[4].schema(), other.metricTypeId);
                fieldSetFlags()[4] = true;
            }
            if (isValidValue(fields()[5], other.metricId)) {
                this.metricId = data().deepCopy(fields()[5].schema(), other.metricId);
                fieldSetFlags()[5] = true;
            }
            if (isValidValue(fields()[6], other.time)) {
                this.time = data().deepCopy(fields()[6].schema(), other.time);
                fieldSetFlags()[6] = true;
            }
            if (isValidValue(fields()[7], other.agentRunId)) {
                this.agentRunId = data().deepCopy(fields()[7].schema(), other.agentRunId);
                fieldSetFlags()[7] = true;
            }
            if (isValidValue(fields()[8], other.uuid)) {
                this.uuid = data().deepCopy(fields()[8].schema(), other.uuid);
                fieldSetFlags()[8] = true;
            }
            if (isValidValue(fields()[9], other.num1)) {
                this.num1 = data().deepCopy(fields()[9].schema(), other.num1);
                fieldSetFlags()[9] = true;
            }
            if (isValidValue(fields()[10], other.num2)) {
                this.num2 = data().deepCopy(fields()[10].schema(), other.num2);
                fieldSetFlags()[10] = true;
            }
            if (isValidValue(fields()[11], other.num3)) {
                this.num3 = data().deepCopy(fields()[11].schema(), other.num3);
                fieldSetFlags()[11] = true;
            }
            if (isValidValue(fields()[12], other.num4)) {
                this.num4 = data().deepCopy(fields()[12].schema(), other.num4);
                fieldSetFlags()[12] = true;
            }
            if (isValidValue(fields()[13], other.num5)) {
                this.num5 = data().deepCopy(fields()[13].schema(), other.num5);
                fieldSetFlags()[13] = true;
            }
            if (isValidValue(fields()[14], other.num6)) {
                this.num6 = data().deepCopy(fields()[14].schema(), other.num6);
                fieldSetFlags()[14] = true;
            }
            if (isValidValue(fields()[15], other.timestamp)) {
                this.timestamp = data().deepCopy(fields()[15].schema(), other.timestamp);
                fieldSetFlags()[15] = true;
            }
        }

        /** Creates a Builder by copying an existing Metric2 instance */
        private Builder(phantomlancer.test.serialize.Metric2 other) {
            super(phantomlancer.test.serialize.Metric2.SCHEMA$);
            if (isValidValue(fields()[0], other.dataVersion)) {
                this.dataVersion = data().deepCopy(fields()[0].schema(), other.dataVersion);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.salt)) {
                this.salt = data().deepCopy(fields()[1].schema(), other.salt);
                fieldSetFlags()[1] = true;
            }
            if (isValidValue(fields()[2], other.applicationId)) {
                this.applicationId = data().deepCopy(fields()[2].schema(), other.applicationId);
                fieldSetFlags()[2] = true;
            }
            if (isValidValue(fields()[3], other.timeScope)) {
                this.timeScope = data().deepCopy(fields()[3].schema(), other.timeScope);
                fieldSetFlags()[3] = true;
            }
            if (isValidValue(fields()[4], other.metricTypeId)) {
                this.metricTypeId = data().deepCopy(fields()[4].schema(), other.metricTypeId);
                fieldSetFlags()[4] = true;
            }
            if (isValidValue(fields()[5], other.metricId)) {
                this.metricId = data().deepCopy(fields()[5].schema(), other.metricId);
                fieldSetFlags()[5] = true;
            }
            if (isValidValue(fields()[6], other.time)) {
                this.time = data().deepCopy(fields()[6].schema(), other.time);
                fieldSetFlags()[6] = true;
            }
            if (isValidValue(fields()[7], other.agentRunId)) {
                this.agentRunId = data().deepCopy(fields()[7].schema(), other.agentRunId);
                fieldSetFlags()[7] = true;
            }
            if (isValidValue(fields()[8], other.uuid)) {
                this.uuid = data().deepCopy(fields()[8].schema(), other.uuid);
                fieldSetFlags()[8] = true;
            }
            if (isValidValue(fields()[9], other.num1)) {
                this.num1 = data().deepCopy(fields()[9].schema(), other.num1);
                fieldSetFlags()[9] = true;
            }
            if (isValidValue(fields()[10], other.num2)) {
                this.num2 = data().deepCopy(fields()[10].schema(), other.num2);
                fieldSetFlags()[10] = true;
            }
            if (isValidValue(fields()[11], other.num3)) {
                this.num3 = data().deepCopy(fields()[11].schema(), other.num3);
                fieldSetFlags()[11] = true;
            }
            if (isValidValue(fields()[12], other.num4)) {
                this.num4 = data().deepCopy(fields()[12].schema(), other.num4);
                fieldSetFlags()[12] = true;
            }
            if (isValidValue(fields()[13], other.num5)) {
                this.num5 = data().deepCopy(fields()[13].schema(), other.num5);
                fieldSetFlags()[13] = true;
            }
            if (isValidValue(fields()[14], other.num6)) {
                this.num6 = data().deepCopy(fields()[14].schema(), other.num6);
                fieldSetFlags()[14] = true;
            }
            if (isValidValue(fields()[15], other.timestamp)) {
                this.timestamp = data().deepCopy(fields()[15].schema(), other.timestamp);
                fieldSetFlags()[15] = true;
            }
        }

        /** Gets the value of the 'dataVersion' field */
        public java.lang.Integer getDataVersion() {
            return dataVersion;
        }

        /** Sets the value of the 'dataVersion' field */
        public phantomlancer.test.serialize.Metric2.Builder setDataVersion(java.lang.Integer value) {
            validate(fields()[0], value);
            this.dataVersion = value;
            fieldSetFlags()[0] = true;
            return this;
        }

        /** Checks whether the 'dataVersion' field has been set */
        public boolean hasDataVersion() {
            return fieldSetFlags()[0];
        }

        /** Clears the value of the 'dataVersion' field */
        public phantomlancer.test.serialize.Metric2.Builder clearDataVersion() {
            dataVersion = null;
            fieldSetFlags()[0] = false;
            return this;
        }

        /** Gets the value of the 'salt' field */
        public java.lang.Integer getSalt() {
            return salt;
        }

        /** Sets the value of the 'salt' field */
        public phantomlancer.test.serialize.Metric2.Builder setSalt(java.lang.Integer value) {
            validate(fields()[1], value);
            this.salt = value;
            fieldSetFlags()[1] = true;
            return this;
        }

        /** Checks whether the 'salt' field has been set */
        public boolean hasSalt() {
            return fieldSetFlags()[1];
        }

        /** Clears the value of the 'salt' field */
        public phantomlancer.test.serialize.Metric2.Builder clearSalt() {
            salt = null;
            fieldSetFlags()[1] = false;
            return this;
        }

        /** Gets the value of the 'applicationId' field */
        public java.lang.Long getApplicationId() {
            return applicationId;
        }

        /** Sets the value of the 'applicationId' field */
        public phantomlancer.test.serialize.Metric2.Builder setApplicationId(java.lang.Long value) {
            validate(fields()[2], value);
            this.applicationId = value;
            fieldSetFlags()[2] = true;
            return this;
        }

        /** Checks whether the 'applicationId' field has been set */
        public boolean hasApplicationId() {
            return fieldSetFlags()[2];
        }

        /** Clears the value of the 'applicationId' field */
        public phantomlancer.test.serialize.Metric2.Builder clearApplicationId() {
            applicationId = null;
            fieldSetFlags()[2] = false;
            return this;
        }

        /** Gets the value of the 'timeScope' field */
        public java.lang.Integer getTimeScope() {
            return timeScope;
        }

        /** Sets the value of the 'timeScope' field */
        public phantomlancer.test.serialize.Metric2.Builder setTimeScope(java.lang.Integer value) {
            validate(fields()[3], value);
            this.timeScope = value;
            fieldSetFlags()[3] = true;
            return this;
        }

        /** Checks whether the 'timeScope' field has been set */
        public boolean hasTimeScope() {
            return fieldSetFlags()[3];
        }

        /** Clears the value of the 'timeScope' field */
        public phantomlancer.test.serialize.Metric2.Builder clearTimeScope() {
            timeScope = null;
            fieldSetFlags()[3] = false;
            return this;
        }

        /** Gets the value of the 'metricTypeId' field */
        public java.lang.Long getMetricTypeId() {
            return metricTypeId;
        }

        /** Sets the value of the 'metricTypeId' field */
        public phantomlancer.test.serialize.Metric2.Builder setMetricTypeId(java.lang.Long value) {
            validate(fields()[4], value);
            this.metricTypeId = value;
            fieldSetFlags()[4] = true;
            return this;
        }

        /** Checks whether the 'metricTypeId' field has been set */
        public boolean hasMetricTypeId() {
            return fieldSetFlags()[4];
        }

        /** Clears the value of the 'metricTypeId' field */
        public phantomlancer.test.serialize.Metric2.Builder clearMetricTypeId() {
            metricTypeId = null;
            fieldSetFlags()[4] = false;
            return this;
        }

        /** Gets the value of the 'metricId' field */
        public java.lang.Long getMetricId() {
            return metricId;
        }

        /** Sets the value of the 'metricId' field */
        public phantomlancer.test.serialize.Metric2.Builder setMetricId(java.lang.Long value) {
            validate(fields()[5], value);
            this.metricId = value;
            fieldSetFlags()[5] = true;
            return this;
        }

        /** Checks whether the 'metricId' field has been set */
        public boolean hasMetricId() {
            return fieldSetFlags()[5];
        }

        /** Clears the value of the 'metricId' field */
        public phantomlancer.test.serialize.Metric2.Builder clearMetricId() {
            metricId = null;
            fieldSetFlags()[5] = false;
            return this;
        }

        /** Gets the value of the 'time' field */
        public java.lang.Integer getTime() {
            return time;
        }

        /** Sets the value of the 'time' field */
        public phantomlancer.test.serialize.Metric2.Builder setTime(java.lang.Integer value) {
            validate(fields()[6], value);
            this.time = value;
            fieldSetFlags()[6] = true;
            return this;
        }

        /** Checks whether the 'time' field has been set */
        public boolean hasTime() {
            return fieldSetFlags()[6];
        }

        /** Clears the value of the 'time' field */
        public phantomlancer.test.serialize.Metric2.Builder clearTime() {
            time = null;
            fieldSetFlags()[6] = false;
            return this;
        }

        /** Gets the value of the 'agentRunId' field */
        public java.lang.Long getAgentRunId() {
            return agentRunId;
        }

        /** Sets the value of the 'agentRunId' field */
        public phantomlancer.test.serialize.Metric2.Builder setAgentRunId(java.lang.Long value) {
            validate(fields()[7], value);
            this.agentRunId = value;
            fieldSetFlags()[7] = true;
            return this;
        }

        /** Checks whether the 'agentRunId' field has been set */
        public boolean hasAgentRunId() {
            return fieldSetFlags()[7];
        }

        /** Clears the value of the 'agentRunId' field */
        public phantomlancer.test.serialize.Metric2.Builder clearAgentRunId() {
            agentRunId = null;
            fieldSetFlags()[7] = false;
            return this;
        }

        /** Gets the value of the 'uuid' field */
        public java.lang.CharSequence getUuid() {
            return uuid;
        }

        /** Sets the value of the 'uuid' field */
        public phantomlancer.test.serialize.Metric2.Builder setUuid(java.lang.CharSequence value) {
            validate(fields()[8], value);
            this.uuid = value;
            fieldSetFlags()[8] = true;
            return this;
        }

        /** Checks whether the 'uuid' field has been set */
        public boolean hasUuid() {
            return fieldSetFlags()[8];
        }

        /** Clears the value of the 'uuid' field */
        public phantomlancer.test.serialize.Metric2.Builder clearUuid() {
            uuid = null;
            fieldSetFlags()[8] = false;
            return this;
        }

        /** Gets the value of the 'num1' field */
        public java.lang.Double getNum1() {
            return num1;
        }

        /** Sets the value of the 'num1' field */
        public phantomlancer.test.serialize.Metric2.Builder setNum1(java.lang.Double value) {
            validate(fields()[9], value);
            this.num1 = value;
            fieldSetFlags()[9] = true;
            return this;
        }

        /** Checks whether the 'num1' field has been set */
        public boolean hasNum1() {
            return fieldSetFlags()[9];
        }

        /** Clears the value of the 'num1' field */
        public phantomlancer.test.serialize.Metric2.Builder clearNum1() {
            num1 = null;
            fieldSetFlags()[9] = false;
            return this;
        }

        /** Gets the value of the 'num2' field */
        public java.lang.Double getNum2() {
            return num2;
        }

        /** Sets the value of the 'num2' field */
        public phantomlancer.test.serialize.Metric2.Builder setNum2(java.lang.Double value) {
            validate(fields()[10], value);
            this.num2 = value;
            fieldSetFlags()[10] = true;
            return this;
        }

        /** Checks whether the 'num2' field has been set */
        public boolean hasNum2() {
            return fieldSetFlags()[10];
        }

        /** Clears the value of the 'num2' field */
        public phantomlancer.test.serialize.Metric2.Builder clearNum2() {
            num2 = null;
            fieldSetFlags()[10] = false;
            return this;
        }

        /** Gets the value of the 'num3' field */
        public java.lang.Double getNum3() {
            return num3;
        }

        /** Sets the value of the 'num3' field */
        public phantomlancer.test.serialize.Metric2.Builder setNum3(java.lang.Double value) {
            validate(fields()[11], value);
            this.num3 = value;
            fieldSetFlags()[11] = true;
            return this;
        }

        /** Checks whether the 'num3' field has been set */
        public boolean hasNum3() {
            return fieldSetFlags()[11];
        }

        /** Clears the value of the 'num3' field */
        public phantomlancer.test.serialize.Metric2.Builder clearNum3() {
            num3 = null;
            fieldSetFlags()[11] = false;
            return this;
        }

        /** Gets the value of the 'num4' field */
        public java.lang.Double getNum4() {
            return num4;
        }

        /** Sets the value of the 'num4' field */
        public phantomlancer.test.serialize.Metric2.Builder setNum4(java.lang.Double value) {
            validate(fields()[12], value);
            this.num4 = value;
            fieldSetFlags()[12] = true;
            return this;
        }

        /** Checks whether the 'num4' field has been set */
        public boolean hasNum4() {
            return fieldSetFlags()[12];
        }

        /** Clears the value of the 'num4' field */
        public phantomlancer.test.serialize.Metric2.Builder clearNum4() {
            num4 = null;
            fieldSetFlags()[12] = false;
            return this;
        }

        /** Gets the value of the 'num5' field */
        public java.lang.Double getNum5() {
            return num5;
        }

        /** Sets the value of the 'num5' field */
        public phantomlancer.test.serialize.Metric2.Builder setNum5(java.lang.Double value) {
            validate(fields()[13], value);
            this.num5 = value;
            fieldSetFlags()[13] = true;
            return this;
        }

        /** Checks whether the 'num5' field has been set */
        public boolean hasNum5() {
            return fieldSetFlags()[13];
        }

        /** Clears the value of the 'num5' field */
        public phantomlancer.test.serialize.Metric2.Builder clearNum5() {
            num5 = null;
            fieldSetFlags()[13] = false;
            return this;
        }

        /** Gets the value of the 'num6' field */
        public java.lang.Double getNum6() {
            return num6;
        }

        /** Sets the value of the 'num6' field */
        public phantomlancer.test.serialize.Metric2.Builder setNum6(java.lang.Double value) {
            validate(fields()[14], value);
            this.num6 = value;
            fieldSetFlags()[14] = true;
            return this;
        }

        /** Checks whether the 'num6' field has been set */
        public boolean hasNum6() {
            return fieldSetFlags()[14];
        }

        /** Clears the value of the 'num6' field */
        public phantomlancer.test.serialize.Metric2.Builder clearNum6() {
            num6 = null;
            fieldSetFlags()[14] = false;
            return this;
        }

        /** Gets the value of the 'timestamp' field */
        public java.lang.Long getTimestamp() {
            return timestamp;
        }

        /** Sets the value of the 'timestamp' field */
        public phantomlancer.test.serialize.Metric2.Builder setTimestamp(java.lang.Long value) {
            validate(fields()[15], value);
            this.timestamp = value;
            fieldSetFlags()[15] = true;
            return this;
        }

        /** Checks whether the 'timestamp' field has been set */
        public boolean hasTimestamp() {
            return fieldSetFlags()[15];
        }

        /** Clears the value of the 'timestamp' field */
        public phantomlancer.test.serialize.Metric2.Builder clearTimestamp() {
            timestamp = null;
            fieldSetFlags()[15] = false;
            return this;
        }

        @Override
        public Metric2 build() {
            try {
                Metric2 record = new Metric2();
                record.dataVersion = fieldSetFlags()[0] ? this.dataVersion : (java.lang.Integer) defaultValue(fields()[0]);
                record.salt = fieldSetFlags()[1] ? this.salt : (java.lang.Integer) defaultValue(fields()[1]);
                record.applicationId = fieldSetFlags()[2] ? this.applicationId : (java.lang.Long) defaultValue(fields()[2]);
                record.timeScope = fieldSetFlags()[3] ? this.timeScope : (java.lang.Integer) defaultValue(fields()[3]);
                record.metricTypeId = fieldSetFlags()[4] ? this.metricTypeId : (java.lang.Long) defaultValue(fields()[4]);
                record.metricId = fieldSetFlags()[5] ? this.metricId : (java.lang.Long) defaultValue(fields()[5]);
                record.time = fieldSetFlags()[6] ? this.time : (java.lang.Integer) defaultValue(fields()[6]);
                record.agentRunId = fieldSetFlags()[7] ? this.agentRunId : (java.lang.Long) defaultValue(fields()[7]);
                record.uuid = fieldSetFlags()[8] ? this.uuid : (java.lang.CharSequence) defaultValue(fields()[8]);
                record.num1 = fieldSetFlags()[9] ? this.num1 : (java.lang.Double) defaultValue(fields()[9]);
                record.num2 = fieldSetFlags()[10] ? this.num2 : (java.lang.Double) defaultValue(fields()[10]);
                record.num3 = fieldSetFlags()[11] ? this.num3 : (java.lang.Double) defaultValue(fields()[11]);
                record.num4 = fieldSetFlags()[12] ? this.num4 : (java.lang.Double) defaultValue(fields()[12]);
                record.num5 = fieldSetFlags()[13] ? this.num5 : (java.lang.Double) defaultValue(fields()[13]);
                record.num6 = fieldSetFlags()[14] ? this.num6 : (java.lang.Double) defaultValue(fields()[14]);
                record.timestamp = fieldSetFlags()[15] ? this.timestamp : (java.lang.Long) defaultValue(fields()[15]);
                return record;
            } catch (Exception e) {
                throw new org.apache.avro.AvroRuntimeException(e);
            }
        }
    }
}
